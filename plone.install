# The Plone Unified Installer which compiles and installs the Plone/ZEO server is run in 
# the post_install script; therefore the files installed in /opt/Plone will not actually 
# be managed or known by Pacman. Managing and upgrading Plone after the initial installation
# is done by using 'buildout'. Please read about it in the Plone documentation:
# http://plone.org/documentation/manual/upgrade-guide

## arg 1:  the new package version
post_install() {
    version=$1
    echo
    echo "The Plone ${version%-*} Unified Installer has been placed in /usr/src/Plone"
    echo
    echo "==> Compiling & installing Plone ${version%-*}. This takes a while... "
    echo
    # the install.log will be written in the directory from which the
    # Unified Installer script was started
    cd /usr/src/plone/
	./Plone-${version%-*}-UnifiedInstaller/install.sh --target=/opt/Plone zeo
	if [ $? -gt 0 ]; then 
        echo "========================================"
     	else
		echo "==> To start Plone automatically..."
		echo "    * using SysVinit, add 'plone' to the DAEMONS array in /etc/rc.conf"
		echo "    * using systemd, issue this command: systemctl enable plone.service"
		echo
	fi
	mv install.log `date +%y%m%d`.Plone-${version%-*}.install.log 
}

## arg 1:  the new package version
## arg 2:  the old package version
pre_upgrade() {
   version=$2
   echo
   echo "Note: Upgrades of Plone ${version%-*} should be done using 'buildout'!"
   echo "http://plone.org/documentation/manual/upgrade-guide/minor-version-upgrades"
   echo "Only the Unified Installer and Plone service files will be upgraded."
   echo
}

## arg 1:  the old package version
pre_remove() {
    echo "Removing the Unified Installer and Plone service files"
    rm /usr/src/plone/*.install.log
    lnk=/etc/systemd/system/multi-user.target.wants/plone.service
    if [ -L "$lnk" ]; then rm "$lnk"; fi
}

## arg 1:  the old package version
post_remove() {
  version=$1
  echo 
    if [ -d "/opt/Plone" ]; then
        backupdir="zeocluster.bak"
		echo "Backing up site data & removing Plone ${version%-*}..."
		# see http://plone.org/documentation/kb/backup-and-recover-data-fs-in-linux/backup-plone
		cd /opt/Plone/zeocluster
		# preserve directory permissions as used by Unified Installer
		mkdir -p ../$backupdir/var/
		chown -R plone ../$backupdir/
		mkdir -p ../$backupdir/parts/client1/etc/
		mkdir -p ../$backupdir/parts/client2/etc/
		chown plone ../$backupdir/parts/
		# backup  ZODB database of your site
		cp -pR var/filestorage/ ../$backupdir/var/
		# backup file-like objects of ZODB database
		cp -pR var/blobstorage/ ../$backupdir/var/ 
		# backup all add-ons you have developed yourself 
		cp -pR src/ ../$backupdir/
		dirname="../$backupdir/src/z3c.recipe.staticlxml"
		if [ -D "$dirname" ]; then rm "$dirname"; fi
		# backup your site package configuration & password
		cp -p buildout.cfg ../$backupdir/
		cp -p adminPassword.txt ../$backupdir/adminPassword.old.txt
		# backup the main configuration files for the Zope instances
		cp -p parts/client1/etc/zope.conf ../$backupdir/parts/client1/etc/
		cp -p parts/client1/etc/zope.conf ../$backupdir/parts/client2/etc/
		# remove all else
		cd /opt/Plone
		rm -r zeocluster buildout-cache Plone-docs Python-*
		mv zeocluster.bak zeocluster
		backupfile=zeocluster.backup.`date +%y%m%d`.tar.gz
		tar -czpf $backupfile zeocluster
		rm -r zeocluster
		echo "Your site data has been backed up to /opt/Plone/$backupfile"
    fi
}

# vim:set ts=2 sw=2 et: